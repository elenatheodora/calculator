// The Model
//  CalculatorBrain.swift
//  Calculator1
//  Created by Elena Georgieva on 6/16/15.
//  Copyright (c) 2015 ElenaWill. All rights reserved.
//

import Foundation //core services layer

class CalculatorBrain
{ //no inheritance
    private enum Op: Printable
    {  //enumerated type called Op
        case Operand(Double)
        case UnaryOperation(String, Double -> Double) //2 kinds of operations
        case BinaryOperation(String, (Double,Double) -> Double)
        
        var description: String{
            get{
                switch self{
                case .Operand(let operand):
                    return "\(operand)"
                case .UnaryOperation(let symbol, _):
                    return symbol
                case .BinaryOperation(let symbol, _):
                    return symbol
                }
            }
        }
    }
    private var opStack = [Op]() //Array<Op>() //array of ops, same as code
    
    private var knownOps = [String:Op]() //Dictionary<String, Op>() //dictionary (string like + to its function)
    
    init(){ //adding entries to dictionary
        knownOps["✖️"] = Op.BinaryOperation("✖️", *)// {$0 * $1}
        knownOps["➗"] = Op.BinaryOperation("➗") {$1 / $0}
        knownOps["➕"] = Op.BinaryOperation("➕", +)// {$0 + $1}
        knownOps["➖"] = Op.BinaryOperation("➖") {$1 - $0}
        knownOps["√"] = Op.UnaryOperation("√", sqrt) //{sqrt($0)}
    }
    
    private func evaluate(ops: [Op]) -> (result: Double?,remainingOps: [Op]){//return result and rest of stack
        if !ops.isEmpty {
            var remainingOps = ops //copies
            let op = remainingOps.removeLast() //ops is read-only, can't edit array
            
            switch op {
            case .Operand(let operand):
                return (operand, remainingOps)
            case .UnaryOperation(_, let operation): //_ because we don't care about it
                let operandEvaluation = evaluate(remainingOps) //recursion
                if let operand = operandEvaluation.result{ //getting result value out of it
                    return (operation(operand), operandEvaluation.remainingOps) //turn into double
                }
            case .BinaryOperation(_, let operation)://?
                let op1Evaluation = evaluate(remainingOps)
                if let operand1 = op1Evaluation.result {
                    let op2Evaluation = evaluate(op1Evaluation.remainingOps)
                    if let operand2 = op2Evaluation.result {
                        return (operation(operand1,operand2), op2Evaluation.remainingOps)
                    }
                }
            }
        }
        return(nil, ops) // fail if is empty
    }
    
    func evaluate() -> Double?{ //optional
        let (result, remainder) = evaluate(opStack) //different way to call, use new word
        //print out stack
        println("\(opStack) = \(result) with \(remainder) left over")
        return result
    }
    
    func pushOperand(operand: Double) -> Double? {
        opStack.append(Op.Operand(operand))
        return evaluate()
    }
    func performOperation(symbol: String)->Double?{
        if let operation = knownOps[symbol] {//look it up in the dictionary, returns optinoal
                opStack.append(operation)
        }
        return evaluate()
    }
}
